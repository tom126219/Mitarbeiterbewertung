{"version":3,"file":"12.8bfa1513e84a6c2fcf08.js","mappings":"gPAQaA,EAAgD,SAAHC,GAAwC,IAAlCC,EAAMD,EAANC,OAAQC,EAAQF,EAARE,SAAUC,EAASH,EAATG,UAChF,OACEC,EAAAA,cAAA,OAAKD,UAAS,mBAAAE,OAAqBF,GAAa,IAAMG,MAAO,CAAE,YAAaL,EAAOM,OAAOC,KAAKP,GAAQ,IAAIQ,MAAO,YAAaR,EAAOM,OAAOC,KAAKP,GAAQ,IAAIQ,QAC3JP,EAGP,E,UCdY,SAAAQ,EAAAC,EAAAC,GAAA,gBAAAD,GAAA,GAAAE,MAAAC,QAAAH,GAAA,OAAAA,CAAA,CAAAI,CAAAJ,IAAA,SAAAA,EAAAK,GAAA,IAAAC,EAAA,MAAAN,EAAA,yBAAAO,QAAAP,EAAAO,OAAAC,WAAAR,EAAA,uBAAAM,EAAA,KAAAL,EAAAQ,EAAAC,EAAAC,EAAAC,EAAA,GAAAC,GAAA,EAAAC,GAAA,SAAAJ,GAAAJ,EAAAA,EAAAS,KAAAf,IAAAgB,KAAA,IAAAX,EAAA,IAAAT,OAAAU,KAAAA,EAAA,OAAAO,GAAA,cAAAA,GAAAZ,EAAAS,EAAAK,KAAAT,IAAAW,QAAAL,EAAAM,KAAAjB,EAAAkB,OAAAP,EAAAQ,SAAAf,GAAAQ,GAAA,UAAAb,GAAAc,GAAA,EAAAL,EAAAT,CAAA,iBAAAa,GAAA,MAAAP,EAAA,SAAAK,EAAAL,EAAA,SAAAV,OAAAe,KAAAA,GAAA,kBAAAG,EAAA,MAAAL,CAAA,SAAAG,CAAA,EAAAS,CAAArB,EAAAC,IAAA,SAAAD,EAAAY,GAAA,GAAAZ,EAAA,qBAAAA,EAAA,OAAAsB,EAAAtB,EAAAY,GAAA,IAAAN,EAAA,GAAAiB,SAAAR,KAAAf,GAAAwB,MAAA,uBAAAlB,GAAAN,EAAAyB,cAAAnB,EAAAN,EAAAyB,YAAAC,MAAA,QAAApB,GAAA,QAAAA,EAAAJ,MAAAyB,KAAA3B,GAAA,cAAAM,GAAA,2CAAAsB,KAAAtB,GAAAgB,EAAAtB,EAAAY,QAAA,GAAAiB,CAAA7B,EAAAC,IAAA,qBAAA6B,UAAA,6IAAAC,EAAA,UAAAT,EAAAtB,EAAAY,IAAA,MAAAA,GAAAA,EAAAZ,EAAAoB,UAAAR,EAAAZ,EAAAoB,QAAA,QAAAnB,EAAA,EAAAQ,EAAAP,MAAAU,GAAAX,EAAAW,EAAAX,IAAAQ,EAAAR,GAAAD,EAAAC,GAAA,OAAAQ,CAAA,CA4JZ,QA7IsD,SAAHpB,GAAoB,IAAd2C,EAAO3C,EAAP2C,QACNC,EAAAlC,GAAfmC,EAAAA,EAAAA,WAAS,GAAM,GAA1CC,EAASF,EAAA,GAAEG,EAAYH,EAAA,GACiBI,EAAAtC,GAAXmC,EAAAA,EAAAA,UAAS,GAAE,GAAxCI,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GACuBG,EAAAzC,GAA7BmC,EAAAA,EAAAA,UAAwB,MAAK,GAAhDO,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAChBG,GAAeC,EAAAA,EAAAA,QAAuB,MAsB5C,IApBAC,EAAAA,EAAAA,YAAU,WACR,IACET,GAAa,GAEb,IAAMU,EAAmB,WACnBH,EAAaI,SACfR,EAAcI,EAAaI,QAAQC,YAEvC,EAKA,OAHAF,IACAG,OAAOC,iBAAiB,SAAUJ,GAE3B,kBAAMG,OAAOE,oBAAoB,SAAUL,EAAiB,CACrE,CAAE,MAAOM,GACPC,QAAQZ,MAAM,2BAA4BW,GAC1CV,EAAS,+BACX,CACF,GAAG,KAEEP,EACH,OACE1C,EAAAA,cAAA,OAAKD,UAAU,8CACbC,EAAAA,cAAC6D,EAAAA,EAAO,CAAC9D,UAAU,wCAKzB,GAAIiD,EACF,OACEhD,EAAAA,cAAA,OAAKD,UAAU,gFACbC,EAAAA,cAAA,SAAIgD,IAKV,IAAMc,EAAYvB,EAAQwB,SAAQ,SAAAC,GAAS,OACzCA,EAAUzB,QAAQ0B,KAAI,SAAAC,GAAC,MAAK,CAC1BjC,KAAM+B,EAAU/B,KAChBkC,KAAM,IAAIC,KAAKF,EAAEC,MAAME,mBAAmB,SAC1CC,MAAOJ,EAAEI,MACTC,MAAOP,EAAUQ,eAClB,GAAE,IAGL,OAAmB,IAAf3B,EAEA7C,EAAAA,cAAA,OAAKyE,IAAKvB,EAAcnD,UAAU,oBAChCC,EAAAA,cAAA,OAAKD,UAAU,2CACbC,EAAAA,cAAC6D,EAAAA,EAAO,CAAC9D,UAAU,yCAOzBC,EAAAA,cAACL,EAAc,CACbE,OAAQ,CACN6E,cAAe,CACbC,MAAO,gBACPtE,MAAO,uBAETuE,iBAAkB,CAChBD,MAAO,mBACPtE,MAAO,yBAIXL,EAAAA,cAAA,OACEyE,IAAKvB,EACLhD,MAAO,CAAE2E,MAAO,OAAQC,OAAQ,UAEhC9E,EAAAA,cAAC+E,EAAAA,EAAS,CACRF,MAAOhC,EACPiC,OAAQ,IACRE,KAAMlB,EACNmB,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,KAEhDrF,EAAAA,cAACsF,EAAAA,EAAa,CAACC,gBAAgB,QAC/BvF,EAAAA,cAACwF,EAAAA,EAAK,CACJC,QAAQ,OACRC,cAAe,SAAChE,GAAK,OAAKA,CAAK,IAEjC1B,EAAAA,cAAC2F,EAAAA,EAAK,CACJC,OAAQ,CAAC,EAAG,KACZF,cAAe,SAAChE,GAAK,SAAAzB,OAAQyB,EAAK,cAEpC1B,EAAAA,cAAC6F,EAAAA,EAAO,CACNC,QAAS,SAAFC,GAAkC,IAA7BC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QAAcF,EAALpB,MAC3B,OAAKqB,GAAWC,SAAAA,EAAStE,OAEvB3B,EAAAA,cAAA,OAAKD,UAAU,iDACbC,EAAAA,cAAA,OAAKD,UAAU,0BACbC,EAAAA,cAAA,OAAKD,UAAU,iBACbC,EAAAA,cAAA,QAAMD,UAAU,kDAAiD,eAGjEC,EAAAA,cAAA,QAAMD,UAAU,mCACbkG,EAAQ,GAAGA,QAAQhE,OAGxBjC,EAAAA,cAAA,OAAKD,UAAU,iBACbC,EAAAA,cAAA,QAAMD,UAAU,kDAAiD,aAGjEC,EAAAA,cAAA,QAAMD,UAAU,aACbkG,EAAQ,GAAGvE,UAjBkB,IAuB1C,IAEF1B,EAAAA,cAACkG,EAAAA,EAAM,MACN3D,EAAQ0B,KAAI,SAACD,GAAS,OACrBhE,EAAAA,cAACmG,EAAAA,EAAI,CACHC,IAAKpC,EAAU/B,KACfoE,KAAK,WACLZ,QAAQ,QACRT,KAAMhB,EAAUzB,QAChBN,KAAM+B,EAAU/B,KAChBqE,OAAQtC,EAAUQ,eAAiB,6BAA+B,gCAClE+B,YAAa,EACbC,IAAK,CAAEjG,EAAG,GACVkG,UAAW,CAAElG,EAAG,GAChBmG,mBAAmB,GACnB,MAMd,C","sources":["webpack://mitarbeiterbewertung/./src/components/ui/chart.tsx","webpack://mitarbeiterbewertung/./src/pages/ChartComponent.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\n\ninterface ChartContainerProps {\n  config: Record<string, { label: string; color: string }>;\n  children: ReactNode;\n  className?: string;\n}\n\nexport const ChartContainer: React.FC<ChartContainerProps> = ({ config, children, className }) => {\n  return (\n    <div className={`chart-container ${className || ''}`} style={{ '--chart-1': config[Object.keys(config)[0]].color, '--chart-2': config[Object.keys(config)[1]].color } as React.CSSProperties}>\n      {children}\n    </div>\n  );\n};\n\ninterface ChartTooltipProps {\n  content: (props: any) => ReactNode;\n}\n\nexport const ChartTooltip: React.FC<ChartTooltipProps> = ({ content }) => {\n  return content;\n};\n\ninterface ChartTooltipContentProps {\n  active?: boolean;\n  payload?: any[];\n  label?: string;\n}\n\nexport const ChartTooltipContent: React.FC<ChartTooltipContentProps> = ({ active, payload, label }) => {\n  if (!active || !payload) return null;\n\n  return (\n    <div className=\"bg-white p-2 border border-gray-200 rounded shadow\">\n      <p className=\"label\">{`${label}`}</p>\n      {payload.map((entry, index) => (\n        <p key={index} style={{ color: entry.color }}>\n          {`${entry.name}: ${entry.value}`}\n        </p>\n      ))}\n    </div>\n  );\n};\n\n","'use client'\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Line, LineChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\nimport { ChartContainer, ChartTooltip } from \"@/components/ui/chart\";\nimport { Loader2 } from 'lucide-react';\n\ninterface ChartComponentProps {\n  changes: Array<{\n    name: string;\n    changes: Array<{ date: string; score: number }>;\n    isTopPerformer: boolean;\n  }>;\n}\n\nconst ChartComponent: React.FC<ChartComponentProps> = ({ changes }) => {\n  const [isMounted, setIsMounted] = useState(false);\n  const [chartWidth, setChartWidth] = useState(0);\n  const [error, setError] = useState<string | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    try {\n      setIsMounted(true);\n      \n      const updateDimensions = () => {\n        if (containerRef.current) {\n          setChartWidth(containerRef.current.clientWidth);\n        }\n      };\n\n      updateDimensions();\n      window.addEventListener('resize', updateDimensions);\n\n      return () => window.removeEventListener('resize', updateDimensions);\n    } catch (err) {\n      console.error('Error in ChartComponent:', err);\n      setError('Fehler beim Laden der Grafik');\n    }\n  }, []);\n\n  if (!isMounted) {\n    return (\n      <div className=\"flex items-center justify-center h-[400px]\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-blue-600\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-[400px] bg-red-50 text-red-600 rounded-lg\">\n        <p>{error}</p>\n      </div>\n    );\n  }\n\n  const chartData = changes.flatMap(performer => \n    performer.changes.map(d => ({\n      name: performer.name,\n      date: new Date(d.date).toLocaleDateString('de-DE'),\n      score: d.score,\n      isTop: performer.isTopPerformer\n    }))\n  );\n\n  if (chartWidth === 0) {\n    return (\n      <div ref={containerRef} className=\"h-[400px] w-full\">\n        <div className=\"flex items-center justify-center h-full\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-blue-600\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <ChartContainer\n      config={{\n        topPerformers: {\n          label: \"Top Performer\",\n          color: \"hsl(var(--chart-1))\",\n        },\n        bottomPerformers: {\n          label: \"Andere Performer\",\n          color: \"hsl(var(--chart-2))\",\n        },\n      }}\n    >\n      <div \n        ref={containerRef} \n        style={{ width: '100%', height: '400px' }}\n      >\n        <LineChart\n          width={chartWidth}\n          height={400}\n          data={chartData}\n          margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis \n            dataKey=\"date\" \n            tickFormatter={(value) => value}\n          />\n          <YAxis \n            domain={[0, 100]}\n            tickFormatter={(value) => `${value} Punkte`}\n          />\n          <Tooltip\n            content={({ active, payload, label }) => {\n              if (!active || !payload?.length) return null;\n              return (\n                <div className=\"rounded-lg border bg-background p-2 shadow-sm\">\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-[0.70rem] uppercase text-muted-foreground\">\n                        Mitarbeiter\n                      </span>\n                      <span className=\"font-bold text-muted-foreground\">\n                        {payload[0].payload.name}\n                      </span>\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-[0.70rem] uppercase text-muted-foreground\">\n                        Punktzahl\n                      </span>\n                      <span className=\"font-bold\">\n                        {payload[0].value}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              );\n            }}\n          />\n          <Legend />\n          {changes.map((performer) => (\n            <Line\n              key={performer.name}\n              type=\"monotone\"\n              dataKey=\"score\"\n              data={performer.changes}\n              name={performer.name}\n              stroke={performer.isTopPerformer ? \"var(--color-topPerformers)\" : \"var(--color-bottomPerformers)\"}\n              strokeWidth={2}\n              dot={{ r: 4 }}\n              activeDot={{ r: 6 }}\n              isAnimationActive={false}\n            />\n          ))}\n        </LineChart>\n      </div>\n    </ChartContainer>\n  );\n};\n\nexport default ChartComponent;\n\n"],"names":["ChartContainer","_ref","config","children","className","React","concat","style","Object","keys","color","_slicedToArray","r","e","Array","isArray","_arrayWithHoles","l","t","Symbol","iterator","n","i","u","a","f","o","call","next","done","push","value","length","_iterableToArrayLimit","_arrayLikeToArray","toString","slice","constructor","name","from","test","_unsupportedIterableToArray","TypeError","_nonIterableRest","changes","_useState2","useState","isMounted","setIsMounted","_useState4","chartWidth","setChartWidth","_useState6","error","setError","containerRef","useRef","useEffect","updateDimensions","current","clientWidth","window","addEventListener","removeEventListener","err","console","Loader2","chartData","flatMap","performer","map","d","date","Date","toLocaleDateString","score","isTop","isTopPerformer","ref","topPerformers","label","bottomPerformers","width","height","LineChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tickFormatter","YAxis","domain","Tooltip","content","_ref2","active","payload","Legend","Line","key","type","stroke","strokeWidth","dot","activeDot","isAnimationActive"],"sourceRoot":""}